import SDK from "./sdk";
import { ContextPublisher } from "./publisher";
import { ContextDataProvider } from "./provider";
import { EventLogger } from "./types";
export default class Context {
    private readonly _sdk;
    private readonly _publisher;
    private readonly _dataProvider;
    private readonly _eventLogger;
    private readonly _opts;
    private readonly _attrs;
    private readonly _cassignments;
    private readonly _units;
    private readonly _assigners;
    private readonly _audienceMatcher;
    private _pending;
    private _publishTimeout?;
    private _indexVariables;
    private _index;
    private _failed;
    private _data;
    private _finalized;
    private _finalizing;
    private _goals;
    private _exposures;
    private _overrides;
    private _assignments;
    private _refreshInterval?;
    private _hashes;
    private _promise?;
    constructor(sdk: SDK, options: Record<string, any>, params: Record<string, any>, promise: Promise<any> | Record<string, any>);
    isReady(): boolean;
    isFinalizing(): boolean;
    isFinalized(): boolean;
    isFailed(): boolean;
    ready(): Promise<unknown>;
    pending(): number;
    data(): Record<string, any>;
    eventLogger(): EventLogger;
    publisher(): ContextPublisher;
    provider(): ContextDataProvider;
    publish(requestOptions: Record<string, unknown>): Promise<void>;
    refresh(requestOptions: Record<string, unknown>): Promise<void>;
    getUnit(unitType: string): any;
    unit(unitType: string, uid: string | number): void;
    getUnits(): Record<string, any>;
    units(units: Record<string, number | string>): void;
    getAttribute(attrName: string): any;
    attribute(attrName: string, value: any): void;
    getAttributes(): Record<string, unknown>;
    attributes(attrs: Record<string, unknown>): void;
    peek(experimentName: string): any;
    treatment(experimentName: string): any;
    track(goalName: string, properties: Record<string, unknown>): void;
    finalize(requestOptions: Record<string, any>): true | Promise<void>;
    experiments(): any;
    variableValue(key: string, defaultValue: any): any;
    peekVariableValue(key: string, defaultValue: any): any;
    variableKeys(): Record<string, unknown[]>;
    override(experimentName: string, variant: number): void;
    overrides(experimentVariants: Record<string, number>): void;
    customAssignment(experimentName: string, variant: number): void;
    customAssignments(experimentVariants: Record<string, number>): void;
    _checkNotFinalized(): void;
    _checkReady(expectNotFinalized?: boolean): void;
    _assign(experimentName: string): any;
    _peek(experimentName: string): any;
    _treatment(experimentName: string): any;
    _queueExposure(experimentName: string, assignment: Record<string, any>): void;
    _variableValue(key: string, defaultValue: unknown): any;
    _peekVariable(key: string, defaultValue: unknown): any;
    _validateGoal(goalName: string, properties: Record<string, unknown>): {
        [x: string]: unknown;
    } | null;
    _track(goalName: string, properties: Record<string, unknown>): void;
    _setTimeout(): void;
    _flush(callback?: (error?: Error) => void, requestOptions?: Record<string, unknown>): void;
    _refresh(callback?: (error?: Error) => void, requestOptions?: Record<string, unknown>): void;
    _logEvent(eventName: string, data?: any): void;
    _logError(error: Error): void;
    _unitHash(unitType: string): string | null;
    _init(data: Record<string, any>, assignments?: {}): void;
    _finalize(requestOptions: Record<string, unknown>): true | Promise<void>;
}
